=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-                                                                                                                               -
=                                                        명명 규칙                                                              =
-                                                                                                                               -
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
1. 스네이크 표기법(snake_case) 단어 사이에 언더바를 넣어서 표기하는 방법)을 원칙으로 한다.

2. 함수의 이름 :
함수의 이름은 원칙적으로 소문자여야 하고, 가독성을 위해서 밑줄(_)로 단어를 나눌 수 있다.

3. 변수의 이름 :
중복이 되지 않도록 한다.
소문자가 원칙이며, 가능하면 목적에 합당한 단어로 구성한다.
가독성을 위해 밑줄(_)로 단어 사이에 넣을수 있지만 가능하면 넣지 않는 방향으로
단어를 선택한다.
때에 따라서 카멜 표기법(camelCase)으로 표기해도 된다.
(여러 단어를 연달아 사용할 때 각 단어의 첫 글자를 대문자로 적되, 맨 앞에 오는 글자는 소문자로 표기하는 방법)

4. 프로젝트명은 전부 대문자로 단어사이에 밑줄(_)로 표기한다.

5. BATEM Task File 로 작성하는 경우 파일명을 01.config.fp, 02.Main.fp  ...  순서를
정할수 있는 숫자가 먼저 오는 파일명으로 작성할 수 있다.















=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-                                                                                                                               -
=                                                           참고                                                                =
-                                                                                                                               -
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

카멜 표기법(Camel Case, camelCase)
여러 단어를 연달아 사용할 때 각 단어의 첫 글자를 대문자로 적되, 맨 앞에 오는 글자는 소문자로 표기하는 것이다.
낙타의 등에 있는 혹과 같다고 하여 카멜(Camel) 표기법이라고 부른다. 표기에서도 볼 수 있듯 봉이 하나이기 때문에
단봉낙타 표기법이라고도 하며, 파스칼 표기법과 비교하여 lowerCamelCase라고도 한다. 중간에 XML, JSON 같이 식별자
이름에 약자가 포함되는 경우는 해당 약자를 모두 대문자로 쓸 수도 있다.
(예: parsedXMLElement)

파스칼 표기법(Pascal Case, PascalCase)
이 역시 연달아 오는 단어의 모든 앞글자를 대문자로 표기하는 것은 카멜 표기법과 같지만 맨 앞에 오는 문자를 대문자로 표기한다.
카멜 표기법과 비교하여 UpperCamelCase라고도 하며, 봉이 둘이기 때문에 쌍봉낙타 표기법이라고도 한다. 전술했듯 식별자의 특성에
따라 카멜 표기법과 파스칼 표기법을 적절하게 혼합하여 쓰는 작성 스타일이 대세로, 변수 정의에는 카멜 표기가, 타입 정의에는
파스칼 표기가 대세이다. 언어에 따라 전부 카멜, 전부 파스칼로 표기할 것을 권장하기도 한다.

스네이크 표기법(Snake Case, snake_case)
단어 사이에 언더바를 넣어서 표기하는 것이다. 허나 한 단어에 언더바를 붙인 _apple 등의 명칭은 C++의 장래 예약어 확장을 위해 지양되고 있다.
자세하게는, 언더바를 사용한 후 바로 대문자로 시작하는(e.g. _Apple, _Banana, _Cucumber) 식별자나 인접한 언더바(_a_apple, _b_Banana),
또는 두 개의 언더바(__Apple, __banana)는 모든 스코프에서 지양된다. 언더바로 시작하는 모든 식별자는 전역 스코프에서만 지양된다.
언더바 바로 뒤의 문자를 대문자로 하면 Train_Case, 소문자로 하면 spiral_case로 불린다. 전부 대문자로 하는 경우(SNAKE_CASE)도 있는데,
이는 주로 상수 정의에 사용된다.

헝가리안 표기법(Hungarian Notation)
접두어에 자료형을 붙이는 것으로 strName, bBusy, szName 등이 있다. 자료형 지원이 다양하지 않았던 시기에는 자주 사용되었지만,
자료형도 문서 데이터도 다양해진 현재는 오히려 잘 사용되지 않는 (지양되는) 스타일이다. 무엇보다 개발 도중에 자료형이 바뀐다면
모든 변수명을 수정해주어야 하는 난감한 상황이 연출된다.[4] 자료형이 명백하게 제한되는 경우라 해도 보통은 다른 표기법으로 대체되는 편.
Windows API가 이 표기법을 사용한다.
